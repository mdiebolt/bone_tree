- content_for :head do
  %title Bone Tree

  =javascript_include_tag "http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"
  =javascript_include_tag 'http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.1/underscore-min.js'
  =javascript_include_tag "http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.0/backbone-min.js"
  =javascript_include_tag "cornerstone"
  =javascript_include_tag 'bone_tree'

.bone_tree.left

.right
  %h1 Bone Tree
  %span.background
  <a href="http://github.com/mdiebolt/bone_tree"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://a248.e.akamai.net/assets.github.com/img/7afbc8b248c68eb468279e8c17986ad46549fb71/687474703a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67" alt="Fork me on GitHub"></a>

  %p A browser based filetree written with Backbone.js that supports live updating and reordering of filetree nodes, has a simple, intuitive API, and sports a clean, minimal DOM structure.

  %h3 Features

  %ul.features
    %li Live update of node names, extension names, file type icons
    %li Live sorting of nodes when filetree state changes
    %li Context menu with rename and delete functionality
    %li Auto create directories that don't exist when files are added to the tree
    %li Events triggered when a file is opened, renamed, or deleted

  %h3 Events API

  :coderay
    #!ruby
      # get a new filetree
      tree = new BoneTree.Views.Tree

      # add a new file to the directory
      tree.add('source/main.js', {file: true})

      # this creates the directory source if it doesn't already exist and puts the file main.js inside of it

      tree.bind 'rename', (model, newName) =>
        # this callback is passed the model that changed and the new name of the node
        console.log model

      tree.bind 'remove', (model, collection) =>
        # this callback is passed the model that was removed and the collection it was removed from
        console.log model

      tree.bind 'openFile', (file) =>
        # this callback is passed the file that was just clicked on
        console.log file

:coffeescript
  window.tree = new BoneTree.Views.Tree
    showExtensions: true
    confirmDeletes: true

  tree.bind 'openFile', (file) ->
    console.log file

  tree.add [
    {path: 'file.coffee', description: 'A CoffeeScript file'}
    {path: 'src/main.coffee', description: 'Main entry point'}
    {path: 'src/nested/test.coffee', description: 'A nested file'}
  ]

  $('.bone_tree').append tree.render().$el


